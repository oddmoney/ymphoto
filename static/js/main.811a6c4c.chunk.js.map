{"version":3,"sources":["TourList.js","App.js","serviceWorker.js","index.js"],"names":["TourPhoto","_ref","title","photo","react_default","a","createElement","src","alt","className","TourList","this","props","genres","map","genre","index","key","lib_default","text","synopsis","maxLine","ellipsis","trimRight","basedOn","Component","App","state","_renderMovies","_this","movies","movie","src_TourList_0","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","_callPhotoApi","fetch","credentials","method","headers","Content-Type","Accept","body","currentSn","numPerPage","then","response","json","console","log","catch","err","data","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA8BA,SAASA,EAATC,GAAmC,IAAfC,EAAeD,EAAfC,MAAOC,EAAQF,EAARE,MACvB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAOK,IAAKN,EAAOO,UAAU,mBAOhCC,uLA3BP,OACIN,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YACfL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACXL,EAAAC,EAAAC,cAACN,EAAD,CAAWE,MAAOS,KAAKC,MAAMV,MAAOC,MAAOQ,KAAKC,MAAMT,SAE1DC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACXL,EAAAC,EAAAC,cAAA,UAAKK,KAAKC,MAAMV,OAChBE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACVE,KAAKC,MAAMC,OAAOC,IAAI,SAACC,EAAOC,GAAR,OAAkBZ,EAAAC,EAAAC,cAAA,QAAMG,UAAU,iBAAiBQ,IAAKD,GAAQD,EAA9C,QAE7CX,EAAAC,EAAAC,cAAA,KAAGG,UAAU,qBACbL,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAec,KAAMR,KAAKC,MAAMQ,SAAUC,QAAQ,IAAIC,SAAS,OAAOC,WAAS,EAACC,QAAQ,sBAnBjFC,aC2DRC,6MA3DbC,MAAQ,KAMRC,cAAgB,WAUd,OATeC,EAAKF,MAAMG,OAAOhB,IAAI,SAAAiB,GACnC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,CACL9B,MAAO6B,EAAME,cACb9B,MAAO4B,EAAMG,mBACbrB,OAAQkB,EAAMlB,OACdO,SAAUW,EAAMX,SAChBH,IAAKc,EAAMI,UAMjBC,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAjC,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUb,EAAKc,WADf,OACLb,EADKU,EAAAI,KAEXf,EAAKgB,SAAS,CACZf,WAHS,wBAAAU,EAAAM,SAAAT,QAMbU,cAAgB,WACdC,MAAM,0CAA2C,CAC/CC,YAAa,UACbC,OAAQ,OACRC,QAAS,CACPC,eAAgB,kCAChBC,OAAU,oBAEZC,KAAM,CACLC,UAAa,IACbC,WAAc,QAGfC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIC,QAAQC,IAAIF,KACzBG,MAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,QAG7BpB,SAAW,WACT,OAAOK,MAAM,yDACZS,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAE1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKK,KAAKlC,SACvBgC,MAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,yFA7C1BpD,KAAKyB,aACLzB,KAAKoC,iDA8CE,IACCjB,EAAWnB,KAAKgB,MAAhBG,OACR,OACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAWqB,EAAS,MAAQ,eAC9BA,EAASnB,KAAKiB,gBAAkB,kBAvDvBH,aCSEwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.811a6c4c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis';\nimport './TourList.css';\nclass TourList extends Component {\n    static propTypes = {\n        title: PropTypes.string.isRequired,\n        photo: PropTypes.string.isRequired,\n        genres: PropTypes.array.isRequired,\n        synopsis: PropTypes.string.isRequired\n    }\n    render() {\n        return(\n            <div className=\"TourList\">\n            <div className=\"TourList_Column\">\n                <TourPhoto title={this.props.title} photo={this.props.photo}/>\n            </div>\n            <div className=\"TourList_Column\">\n                <h1>{this.props.title}</h1>\n                <div className=\"TourList_Genres\">\n                    {this.props.genres.map((genre, index) => <span className=\"TourList_Genre\" key={index}>{genre} </span>)}\n                </div>\n                <p className=\"TourList_Synopsis\">\n                <LinesEllipsis text={this.props.synopsis} maxLine='3' ellipsis=' ...' trimRight basedOn='letters'/>\n                </p>\n            </div>\n        </div>\n        );\n    }\n}\nfunction TourPhoto({title, photo}) {\n    return (\n        <img src={photo} alt={title} className=\"TourList_Photo\"/>\n    )\n}\nTourPhoto.propTypes = {\n    title: PropTypes.string.isRequired,\n    photo: PropTypes.string.isRequired\n}\nexport default TourList;","import React, { Component } from 'react';\nimport './App.css';\nimport TourList from './TourList';\nclass App extends Component {\n  state = {\n  }\n  componentDidMount() {\n    this._getMovies();\n    this._callPhotoApi();\n  }\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return <TourList \n        title={movie.title_english} \n        photo={movie.medium_cover_image}\n        genres={movie.genres}\n        synopsis={movie.synopsis}\n        key={movie.id}\n        />\n    })\n    return movies\n  }\n  // async 비동기\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    });    \n  }\n  _callPhotoApi = () => {  \n    fetch(\"http://localhost:8080/rest/photoList.do\", {\n      credentials: 'include',  \n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8',\n        'Accept': 'application/json'\n      },      \n      body: {\n       \"currentSn\": \"1\",\n       \"numPerPage\": \"10\"\n      }\n     })\n     .then(response => response.json())\n     .then(json => console.log(json))\n     .catch(err => console.log(err));\n  }\n\n  _callApi = () => {\n    return fetch(\"https://yts.am/api/v2/list_movies.json?sort_by=rating\")\n    .then(response => response.json())\n    //.then(json => console.log(json))\n    .then(json => json.data.movies)\n    .catch(err => console.log(err));\n  }\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App-loading\"}>\n        {movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}